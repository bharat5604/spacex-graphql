import { useQuery } from "@tanstack/react-query";
import { gql } from "graphql-request";
import { GraphQLResponse } from "graphql-request/dist/types";
import Head from "next/head";
import Image from "next/image";
import { FC, useState } from "react";
import YouTube from "react-youtube";
import CardSkeleton from "../components/CardSkeleton";
import { compareAsc, format } from "date-fns";
import graphqlRequestClient from "../src/lib/GraphqlRequestClient";
import { SpaceXPast } from "../src/lib/interfaces/SpaceXPast";
import Compare from "../components/Compare";

const Home: FC = () => {
  let [isOpen, setIsOpen] = useState(false);
  const [loading, setLoading] = useState(false);
  const [search, setSearch] = useState("");
  const [pagination, setPagination] = useState(10);
  const GET_ALL_LAUNCHES = gql`
    query {
      launchesPast(limit: ${JSON.stringify(
        pagination
      )}, find: { mission_name:${JSON.stringify(search)} }) {
        id
        mission_name
        launch_date_local
        launch_site {
          site_name_long
        }
        links {
          article_link
          video_link
        }
        rocket {
          rocket_name
          first_stage {
            cores {
              flight
              core {
                reuse_count
                status
              }
            }
          }
          second_stage {
            payloads {
              payload_type
              payload_mass_kg
              payload_mass_lbs
            }
          }
        }
        ships {
          name
          home_port
          image
        }
      }
    }
  `;
  const { isLoading, error, data, refetch } = useQuery<
    GraphQLResponse,
    Error,
    SpaceXPast[]
  >(["launches"], async () => {
    return graphqlRequestClient.request(GET_ALL_LAUNCHES);
  });

  const handleSearch = async () => {
    setLoading(true);
    await refetch();
    setLoading(false);
  };

  // const { launchesPast } = data;

  console.log("data", data);
  const opts = {
    height: "100%",
    width: "100%",
    playerVars: {
      autoplay: 1,
    },
  };
  function _onReady(event: any) {
    event.target.pauseVideo();
  }

  /**
   * ? adding compare modal
   */

  function closeModal() {
    setIsOpen(false);
  }

  function openModal() {
    setIsOpen(true);
    console.log("hello");
  }

  return (
    <div className="">
      <Head>
        <title>SpaceX</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>

      <div className="px-8 py-6 bg-black min-h-screen">
        <h1 className="text-4xl text-center text-gray-700 font-bold">SpaceX</h1>
        <h3 className="text-4xl text-center mt-5 text-gray-700 font-bold">
          SpaceX Past Launches By Name
        </h3>
        <div className="search w-1/2 mx-auto mt-8 relative">
          <input
            type="text"
            placeholder="Search SpaceX Luanches"
            className="bg-white w-full h-10 rounded-2xl outline-none px-4 shadow-lg"
            onChange={(e) => setSearch(e.target.value)}
          />
          <button
            onClick={() => handleSearch()}
            className="absolute bg-blue-600 h-10 text-white font-bold rounded-2xl px-6 right-0"
          >
            Search
            {loading && (
              <div
                className="spinner-border ml-1 animate-spin inline-block w-4 h-5 border-4 rounded-full"
                role="status"
              ></div>
            )}
          </button>
        </div>
        <div className="grid grid-cols-3 mt-10 gap-8">
          {isLoading ? (
            <>
              <CardSkeleton />
              <CardSkeleton />
              <CardSkeleton />
              <CardSkeleton />
            </>
          ) : (
            data?.launchesPast?.map((item: any, index: number) => (
              <div className="shadow p-3 rounded-lg bg-gray-900" key={index}>
                <h1 className="text-white text-center font-bold mb-2">
                  {item?.mission_name}
                </h1>
                <h2 className="text-blue-700 text-center mb-2">
                  {item?.launch_site?.site_name_long}
                </h2>
                <h2 className="text-white text-center  mb-2">
                  {format(new Date(item?.launch_date_local), "yyyy-MM-dd")}
                </h2>
                <div className=" my-3">
                  <video className="w-full rounded-xl h-[200px] mt-4" controls>
                    <source
                      src={`${item?.links?.video_link}`}
                      type="video/mp4"
                    />
                  </video>
                </div>
                <div className="text-center">
                  <button
                    onClick={openModal}
                    className="bg-blue-700 text-white font-semibold p-2 rounded-xl"
                  >
                    Learn More
                  </button>
                </div>
              </div>
            ))
          )}
        </div>
        <div className="load mt-4 text-center">
          {data?.launchesPast[0]?.id ? (
            <button
              onClick={async () => {
                await setPagination(() => pagination + 10);
                setLoading(true);
                await refetch();
                setLoading(false);
              }}
              className="bg-yellow-600 p-2 px-6 rounded-2xl font-bold text-xl text-gray-900 drop-shadow-xl"
            >
              Load More
              {loading && (
                <div
                  className="spinner-border ml-1 animate-spin inline-block w-4 h-5 border-4 rounded-full"
                  role="status"
                ></div>
              )}
            </button>
          ) : (
            ""
          )}
        </div>
      </div>

      <Compare
        openModal={openModal}
        isOpen={isOpen}
        data={data?.launchesPast}
        closeModal={closeModal}
      />
    </div>
  );
};

export default Home;
